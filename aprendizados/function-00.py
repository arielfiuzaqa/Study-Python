''' Function (Fun√ß√µes) - fun√ß√µes s√£o blocos de c√≥digo nomeados que realizam uma 
tarefa espec√≠fica quando chamados. As fun√ß√µes permitem a organiza√ß√£o e reutiliza√ß√£o 
de c√≥digo, tornando o c√≥digo mais modular e leg√≠vel.

Pode usar a 'def' para criar uma fun√ß√£o, onde depois da fun√ß√£o criada podemos chamar ela
pelo nome que demos a ela. 

Algumas fun√ß√µes incluem:  print(), len(), input(), range(), entre outras.

input() - Fun√ß√£o que recebemos um dado
len() - Fun√ß√£o que vai mensurar o tamanho de um objeto
split() - Fun√ß√£o que transforma strings em listas

Como Cria uma?

def nome_da_fun√ß√£o(parametros):
    bloco do codigo
'''
def dar_boas_vindas(): # podemos deixar sem parametros para tornar mais legivel as fun√ß√µes
    print('Bem-vindo!')

dar_boas_vindas()

# Personalizada
def dar_boas_vindas_personalizadas(nome): 
    print(f'Bem-vindo! {nome}')

dar_boas_vindas_personalizadas('Ariel')

# Valor Padr√£o
def apresentar_lugar(lugar='Nossa Loja'): # Parametro com valor padr√£o(designado o valor)
    print(f'Visite {lugar}.')
    
apresentar_lugar() # Com valor padr√£o n√£o precisa definir, mas quando define √© substituido
apresentar_lugar('a Disney') # Retorna o valor designado

'''ü•áDesafioü•á'''
''' 
DESAFIO 1 - Crie uma fun√ß√£o chamada gerar_nome_completo que recebe como par√¢metro o nome 
e sobrenome de algu√©m e d√° boas vindas para essa pessoa
'''
def nome_e_sobrenome(nome, sobrenome):
    print(f'Ol√° {nome} {sobrenome}') # processando um valor, diferente de retornar um valor

nome_e_sobrenome('Ariel', 'Fontenele')

''' 
DESAFIO 2 - # Crie uma fun√ß√£o chamada calcular_valores que recebe 2 par√¢metros o primeiro 
o preco de um produto e o segundo par√¢metro √© a quantidade, por√©m a quantidade deve haver um 
valor padr√£o de 1. Sua fun√ß√£o deve exibir o resultado do pre√ßo do produto, multiplicado a 
quantidade escolhida.
'''
def calcular_valor(preco, quantidade=1):
    print (f'{preco * quantidade:.2f}') # Ou print(preco * quantidade)

calcular_valor(10, 2)


''' Preocessar VS Retornar (Fun√ß√µes) - 
Fun√ß√£o que apenas processa dados ex: -> print()
Fun√ß√£o que retorna dados ex: -> input() e eu posso guarda esse input em uma variavel.

Como posso escolher entre fun√ß√µes que processam dados e os que retornam dados? Depende!
Vou precisar usar essa informa√ß√£o na l√≥gica do meu programa ainda?
Ou s√≥ preciso processaar esse dado, mas n√£o irei utilizar mais ele depois?

Vamos aos exemplos para entender.
'''
# A primeira fun√ß√£o n√£o ser√° usada para calculos ou logicas, apenas informa o usuario.
def exibir_cotacao_do_dia(moeda):
    if moeda == 'usd':
        print ('US$5,47')

exibir_cotacao_do_dia('usd')

''' O segundo vai estar devolvendo um resultado para quem chamou ela, ou seja, permite que re-use
dentro da fun√ß√£o, colocando assim v√°rias condi√ß√µes caso eu queira por-las'''
def obter_cotacao_do_dia(moeda):
    if moeda == 'usd':
        return 5.47
    
# Podemos cria condi√ß√µes como essa na segunda forma
cotacao = obter_cotacao_do_dia('usd')
if 4 > cotacao > 5.50:
    print('Cotacao alta, cuidado com saque!')
else:
    print("Investir em a√ß√µes americanas")


''' Argumentos Posicionais VS Argumentos Nomeados
> Argumentos Posicionais:
Argumentos posicionais s√£o passados para a fun√ß√£o na ordem em que os par√¢metros s√£o definidos.
Eles n√£o s√£o seguidos pelo nome do par√¢metro na chamada da fun√ß√£o.
A ordem √© importante, pois a fun√ß√£o associa os valores passados com os par√¢metros com base na ordem.

> Argumentos Nomeados (ou Argumentos de Palavra-Chave):
Argumentos nomeados s√£o passados para a fun√ß√£o com o nome do par√¢metro ao qual eles devem ser associados.
Eles s√£o √∫teis quando voc√™ deseja especificar apenas alguns dos par√¢metros de uma fun√ß√£o e deseja ignorar os demais.
A ordem n√£o √© importante ao usar argumentos nomeados.

Caso coloque um * Todos os parametros apos o * precisam ser nomeados, isso √© uma forma de obrigar
a quem for mexer no c√≥digo nomear determinados parametros dentro do argumento.

Vamos aos exemplos:
'''

print('\nExemplos de Argumentos Nomeados e Posicionados\n')
def exibir_preco(nome_produto, preco): # Parametros - Observe a ordem deles.
    print(f'{nome_produto} custa {preco}.')

exibir_preco('Iphone', 5000) # Corresponde a posi√ß√£o dos parametros - Argumentos Posicionais
exibir_preco(preco=5000, nome_produto='Iphone') # Corresponde independente da ordem - Arg. Nomeados


''' ü•á Desafio ü•á

Crie uma fun√ß√£o chamado gerar_objeto_personalizado que ir√° receber 3 par√¢metros, cor, altura, 
formato.
A sua fun√ß√£o deve apenas imprimir na tela o que foi passado para ela, nada mais, nada menos.
Por√©m ela deve seguir as seguintes regras:

1 - O primeiro argumento deve ser posicional
2 - Os argumentos altura e formato precisam OBRIGATORIAMENTE serem nomeados
'''

print('\nDesafio dos Argumentos\n')
def gerar_objeto_personalizado(cor, *, altura, formato): # Ap√≥s * todos devem ser nomeados
    print(f'Sua caixa tem {altura}cm e {formato} na {cor}, tudo bem assim?')    

gerar_objeto_personalizado('Azul', formato='Retangular', altura=50)


''' Argumentos Din√¢micos - Fun√ß√µes com numeros de argumentos. Argumentos din√¢micos s√£o um conceito 
em programa√ß√£o que se refere √† capacidade de uma fun√ß√£o ou m√©todo receber um n√∫mero vari√°vel de 
argumentos durante sua chamada. Em Python, esse conceito √© implementado usando os operadores 
"*args" e "**kwargs" (abrevia√ß√µes para "argumentos" e "argumentos de palavra-chave").

> *args (Argumentos Posicionais Din√¢micos):
O operador *args permite que uma fun√ß√£o aceite um n√∫mero arbitr√°rio de argumentos posicionais.
Os argumentos passados s√£o empacotados em uma tupla (uma sequ√™ncia imut√°vel) e podem ser acessados 
dentro da fun√ß√£o usando essa tupla.
Isso √© √∫til quando voc√™ n√£o sabe antecipadamente quantos argumentos a fun√ß√£o receber√°.

> **kwargs (Argumentos de Palavra-Chave Din√¢micos):
O operador **kwargs permite que uma fun√ß√£o aceite um n√∫mero arbitr√°rio de argumentos de 
palavra-chave (tamb√©m conhecidos como argumentos nomeados).
Os argumentos de palavra-chave passados s√£o empacotados em um dicion√°rio (um conjunto de pares 
chave-valor) e podem ser acessados dentro da fun√ß√£o usando esse dicion√°rio.
Isso √© √∫til quando voc√™ deseja fornecer argumentos opcionais com nomes espec√≠ficos.

Exemplos:
'''
# *Args(Arguments) - Argumentos posicionais din√¢micos
print('\nAmostra do aprendizado anterior.\n')
def somar(valor, b): # Fun√ß√£o com 2 argumentos definidos, valor e b. 
    print(valor + b) # papel que essa fun√ß√£o deve desempenhar, que √© trazer a somar dos argumentos
somar(10, 10) # Resultado impimido ser√° 20

print('\nExemplo com *args\n')
def somar(*valores, b): # Com * posso estar recebendo mais de um valor no argumento
    print(valores) # Imprime primeiro os valores na tela que est√£o armazenados
    for valor in valores: 
        b += valor # Pegar o valor dentro de b e somar com os valores
    print(b) # O Resultado final √© a soma de tudo com o b.

somar(10, 20, 5, b=5) # Com isso, outros argumentos devem ser nomeados para sua identifica√ß√£o

# **Kwargs(Keyword arguments) - Argumentos nomeados din√¢micos
print('\nExmplo com **kwargs\n')
def concatenar(**palavras):
    frase = ''
    for palavra in palavras.values():
        frase += palavra + ' '
        print(frase)

concatenar(a='N√≥s', b='Somos', c='Pythonista', d='Profissionais')

# Usando todos os argumentos que aprendemos
print('\nUsando todos os argumentos juntos.\n')
def contagem_de_letras(nome, *args, **kwargs):
    print(nome)
    print(args)
    print(kwargs)
    for arg in args:
        print(arg)
    for kwarg in kwargs.values():
        print(kwarg)

contagem_de_letras('Gugu',5,7,9,11,a=1,b=2,c=3)

# Pr√≥ximo - Decorators