''' Function (Fun√ß√µes) - fun√ß√µes s√£o blocos de c√≥digo nomeados que realizam uma 
tarefa espec√≠fica quando chamados. As fun√ß√µes permitem a organiza√ß√£o e reutiliza√ß√£o 
de c√≥digo, tornando o c√≥digo mais modular e leg√≠vel.

Pode usar a 'def' para criar uma fun√ß√£o, onde depois da fun√ß√£o criada podemos chamar ela
pelo nome que demos a ela. 

Algumas fun√ß√µes incluem:  print(), len(), input(), range(), entre outras.

input() - Fun√ß√£o que recebemos um dado
len() - Fun√ß√£o que vai mensurar o tamanho de um objeto
split() - Fun√ß√£o que transforma strings em listas

Como Cria uma?

def nome_da_fun√ß√£o(parametros):
    bloco do codigo
'''
def dar_boas_vindas(): # podemos deixar sem parametros para tornar mais legivel as fun√ß√µes
    print('Bem-vindo!')

dar_boas_vindas()

# Personalizada
def dar_boas_vindas_personalizadas(nome): 
    print(f'Bem-vindo! {nome}')

dar_boas_vindas_personalizadas('Ariel')

# Valor Padr√£o
def apresentar_lugar(lugar='Nossa Loja'): # Parametro com valor padr√£o(designado o valor)
    print(f'Visite {lugar}.')
    
apresentar_lugar() # Com valor padr√£o n√£o precisa definir, mas quando define √© substituido
apresentar_lugar('a Disney') # Retorna o valor designado

'''ü•áDesafioü•á'''
''' 
DESAFIO 1 - Crie uma fun√ß√£o chamada gerar_nome_completo que recebe como par√¢metro o nome 
e sobrenome de algu√©m e d√° boas vindas para essa pessoa
'''
def nome_e_sobrenome(nome, sobrenome):
    print(f'Ol√° {nome} {sobrenome}') # processando um valor, diferente de retornar um valor

nome_e_sobrenome('Ariel', 'Fontenele')

''' 
DESAFIO 2 - # Crie uma fun√ß√£o chamada calcular_valores que recebe 2 par√¢metros o primeiro 
o preco de um produto e o segundo par√¢metro √© a quantidade, por√©m a quantidade deve haver um 
valor padr√£o de 1. Sua fun√ß√£o deve exibir o resultado do pre√ßo do produto, multiplicado a 
quantidade escolhida.
'''
def calcular_valor(preco, quantidade=1):
    print (f'{preco * quantidade:.2f}') # Ou print(preco * quantidade)

calcular_valor(10, 2)


''' Preocessar VS Retornar (Fun√ß√µes) - 
Fun√ß√£o que apenas processa dados ex: -> print()
Fun√ß√£o que retorna dados ex: -> input() e eu posso guarda esse input em uma variavel.

Como posso escolher entre fun√ß√µes que processam dados e os que retornam dados? Depende!
Vou precisar usar essa informa√ß√£o na l√≥gica do meu programa ainda?
Ou s√≥ preciso processaar esse dado, mas n√£o irei utilizar mais ele depois?

Vamos aos exemplos para entender.
'''
# A primeira fun√ß√£o n√£o ser√° usada para calculos ou logicas, apenas informa o usuario.
def exibir_cotacao_do_dia(moeda):
    if moeda == 'usd':
        print ('US$5,47')

exibir_cotacao_do_dia('usd')

''' O segundo vai estar devolvendo um resultado para quem chamou ela, ou seja, permite que re-use
dentro da fun√ß√£o, colocando assim v√°rias condi√ß√µes caso eu queira por-las'''
def obter_cotacao_do_dia(moeda):
    if moeda == 'usd':
        return 5.47
    
# Podemos cria condi√ß√µes como essa na segunda forma
cotacao = obter_cotacao_do_dia('usd')
if 4 > cotacao > 5.50:
    print('Cotacao alta, cuidado com saque!')
else:
    print("Investir em a√ß√µes americanas")