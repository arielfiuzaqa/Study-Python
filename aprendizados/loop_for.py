'''Loop For (LaÃ§o For) - As vezes quando estamos fazendo algum tipo de processamento de dados
Ã© possÃ­vel que precise fazer a mesma aÃ§Ã£o vÃ¡rias vezes. Como por exemplo escrever carregando...
Mas escrever vÃ¡rias vezes nÃ£o Ã© a soluÃ§Ã£o, existem formas melhores de se fazer isso e vou abordar
Aqui! - AtravÃ©s do laÃ§os de repetiÃ§Ã£o, atravÃ©s do comando for e range, 
Isso para o nÃºmero de repetiÃ§Ãµes que vocÃª sabe que quer.
'''
print("Exemplo 1\n")
for numero in range(5): # for(laÃ§o), numero(), in(dentro de), range(repete tantas vezes) o codigo abaixo
    print('Carregando') # o que queremos repetir apenas
    print('Contando', numero) # O que queremos repetir mas a contagem ate acabar
'''OBS: Dentro do range eu posso escolher um intervalo de inicio e fim exemplo range(1,6) onde
nesse caso vai contar a repetiÃ§Ã£o de 1 ate 5 jÃ¡ que comeÃ§ar em zero a contagem
    Temos ainda um terceito parametro do range(0,0,0) onde o terceiro se refere a como vai ser
    repetir, se vai ser de 2 em 2, 3 em 3 etc.
'''
print('\nExemplo 2\n')
for y in range(1, 21, 2): # y estÃ¡ representando que pode ser qualquer nome aqui que vocÃª queira
    print('Contando', y) # usamos nomes para facilitar mas nÃ£o existe obrigatoriedade especifica


''' Caso NÃ£o saiba o numero de repetiÃ§Ã£o que eu tenho que fazer? 
    No caso de uma Lista qualquer: Quero que repita o comando de printar cada nome ate acabar
a lista sendo que nÃ£o sei quantos nomes eu tenho mas quero que todos sejam ditos.

'''
print("\nExemplo 3\n")
nomes = ["Alice", "Bob", "Carol", "David", "Eva", "Frank", "Grace", "Helen", "Igor", "Julia"]
for nome in nomes:
    print(nome) # passa por cada item de unidade, Ã© intuitivo quando se testa


'''â€‹ğŸ¥‡ Desafio 1 ğŸ¥‡
Usando um loop for, exiba na tela: 
Estamos em X, onde x Ã© um valor iniciando em 18 e finalizando em 110
'''
print('\nDesafio 1\n')
for contagem in range(19, 111):
    print('Estamos em', contagem)

''' ğŸ¥‡ğŸ¥‡ Desafio 2 ğŸ¥‡ğŸ¥‡
 VocÃª precisa de 10 passos para finalizar uma tarefa exiba na tela: 
 Usando loop for a seguinte frase: "ExplosÃ£o em X" onde X vai de 10 ate 1
'''
print('\nDesafio 2\n')
for explosao in range(1, 11):
    print('ExplosÃ£o em', explosao)


print('\nDesafio 2 - Escrita de cÃ³digo\n')
for explosao in range(1, 11):
    print(f'ExplosÃ£o em {explosao}')


''' Loops aninhados - geralmente os loops usamos um unico interavel mas em alguns
casos podemos acabar tendo que usar mais de um interavel.
    Como se fosse uma lista ou uma faixa de valores por exemplo.

    Exemplo prÃ¡tico: Estamos criando um sistema de calendÃ¡rio e precisamos digitar a seguinte 
    combinaÃ§Ã£o para todos os paÃ­ses do mundo:
    Nome do PaÃ­s + EstaÃ§Ã£o. 

    Podemos criar uma lista com todos os paÃ­ses mas vamos usar 3 para exemplificar.
'''
print('\nLoops Aninhados\n')
paises = ['Brasil', 'India', 'EUA']
estacao_do_ano = ['primavera', 'verÃ£o', 'outono', 'inverno']
# Para cada pais dentro da lista paises iremos percorrer as estaÃ§Ãµes do ano usando um loop for
for pais in paises:
    for estacao in estacao_do_ano:
        print(f'{pais} estÃ¡ na estaÃ§Ã£o {estacao}.')
'''Ã‰ perceptÃ­vel a lÃ³gica bela desse cÃ³digo. 
Vai percorrer cada item pais => paises individualmente e onde cada pais => estacao e como
estacao esta para => estacao_do_ano, percorre tudo antes de voltar e pegar o segundo item 
pais => paises.
'''
# Na forma numerica do exemplo anterior
print('\nExemplo NumÃ©rico\n')
for x in range(1, 11):
    for y in range(1, 4):
        print(f'Valor externo {x} e interno {y}')

''' ğŸ¥‡ğŸ¥‡ğŸ¥‡ Desafio 3 ğŸ¥‡ğŸ¥‡ğŸ¥‡ - Sabemos que os celulares que sÃ£o lanÃ§ados hoje em dia tem sempre
as versÃµes mais simples ate as versÃµes premium, pois bem. Vamos agora usar isso para indicar os
celulares que serao lanÃ§ados no futuro.
'''
print('\nDesafio 3\n')
celulares = ['Asus', 'Sansung', 'Sony', 'IPhone']
versoes = ['Plus', 'Premium Plus', 'Premium Deluxe', 'Plus Premium Ultra']
# Percorrendo todas as posiÃ§Ãµes das listas celular e versÃ£o
for celular in celulares:
    for versao in versoes:
        print(f'{celular} {versao}')


''' InterÃ¡vel(iterable) Ã© um objeto que pode ser percorrido, elemento por elemento, 
usando um loop ou uma estrutura de controle de fluxo. Em outras palavras, um iterÃ¡vel Ã© 
uma sequÃªncia de elementos que vocÃª pode iterar (ou seja, percorrer) um por um.

Os iterÃ¡veis sÃ£o uma parte fundamental da linguagem Python e sÃ£o amplamente utilizados 
em loops, compreensÃµes de lista, funÃ§Ãµes que aceitam iterÃ¡veis como argumentos e muito mais.

Alguns exemplos de interÃ¡veis a baixo.
'''
'''Listas (Lists): Uma lista Ã© uma sequÃªncia ordenada de elementos, e vocÃª pode iterar 
por ela usando um loop for ou outras construÃ§Ãµes de controle de fluxo.'''
print('\nList\n')
my_list = [1, 2, 3, 4, 5, 6, 7]
for item in my_list:
    print(item)

'''Tuplas (Tuples): Assim como as listas, as tuplas sÃ£o iterÃ¡veis e podem ser percorridas 
da mesma forma.'''
print('\nTurple\n')
my_tuple = (10, 20, 30, 40, 50)
for item in my_tuple:
    print(item)

# Strings: As strings sÃ£o sequÃªncias de caracteres e tambÃ©m sÃ£o iterÃ¡veis.
print('\nString\n')
my_string = "Pythonista"
for char in my_string:
    print(char)

'''DicionÃ¡rios (Dictionaries): Os dicionÃ¡rios em Python sÃ£o iterÃ¡veis, mas vocÃª pode iterar 
pelas chaves, pelos valores ou pelos pares chave-valor.'''
print('\nDict\n')
my_dict = {"a": 1, "b": 2, "c": 3}
for key in my_dict:
    print(key, my_dict[key])

#Conjuntos (Sets): Os conjuntos tambÃ©m sÃ£o iterÃ¡veis.
print('\nSets\n')
my_set = {1, 2, 3, 4, 5}
for item in my_set:
    print(item)
'''Iteradores Personalizados: 
VocÃª pode criar seus prÃ³prios objetos iterÃ¡veis definindo uma classe que implementa 
os mÃ©todos __iter__() e __next__().'''
